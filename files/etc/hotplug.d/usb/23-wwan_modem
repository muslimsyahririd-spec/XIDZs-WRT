#!/bin/sh
#
# Hotplug Script for WWAN module configuration
# @lionware <lionware@siltesa.com> - October 2025
# credit mbah wisnu ( remod version by xidz_x )
#

# Check ACTION event type
case "$ACTION" in
    add|change|remove) ;;
    *) exit 0 ;;
esac

# Extract VID with validation
if [ -z "$PRODUCT" ]; then
    logger -t wwan_modem "PRODUCT variable not found, exiting"
    exit 0
fi

VID=$(echo "$PRODUCT" | cut -d'/' -f1)

# Validate VID exists
if [ -z "$VID" ]; then
    logger -t wwan_modem "VID not found in PRODUCT: $PRODUCT"
    exit 0
fi

# Check supported VID list
case "$VID" in
    2cb7|1199|8087|413c|1bc7|2c7c|3f0|489|5c6|e8d)
        logger -t wwan_modem "VID:$VID detected - Supported device"
        ;;
    *)
        logger -t wwan_modem "VID:$VID detected - Unsupported device, skipping"
        exit 0
        ;;
esac

# Get interface name with improved error handling
get_iface() {
    local proto="$1"
    local result=""
    
    if [ -n "$proto" ]; then
        result=$(uci show network 2>/dev/null | grep "proto='$proto'" | head -n1 | cut -d'.' -f2 2>/dev/null)
    fi
    
    echo "$result"
}

# Check if interface exists and is valid
interface_exists() {
    local iface="$1"
    [ -n "$iface" ] && uci -q get "network.$iface" >/dev/null 2>&1
}

# Check if UCI section exists
uci_section_exists() {
    local config="$1"
    local section="$2"
    uci -q get "$config.$section" >/dev/null 2>&1
}

# Set serial port with validation
set_port() {
    local port="$1"
    
    [ -z "$port" ] && return 1
    
    # Set port for various configs if section exists
    uci_section_exists "3ginfo" "@3ginfo[0]" && {
        uci set "3ginfo.@3ginfo[0].device=$port" 2>/dev/null
        uci -q commit 3ginfo
    }
    
    uci_section_exists "atcommands" "@atcommands[0]" && {
        uci set "atcommands.@atcommands[0].set_port=$port" 2>/dev/null
        uci -q commit atcommands
    }
    
    uci_section_exists "modemband" "@modemband[0]" && {
        uci set "modemband.@modemband[0].set_port=$port" 2>/dev/null
        uci -q commit modemband
    }
    
    uci_section_exists "modeminfo" "@modeminfo[0]" && {
        uci set "modeminfo.@modeminfo[0].device=$port" 2>/dev/null
        uci -q commit modeminfo
    }
    
    uci_section_exists "sms_tool_js" "@sms_tool_js[0]" && {
        uci set "sms_tool_js.@sms_tool_js[0].readport=$port" 2>/dev/null
        uci set "sms_tool_js.@sms_tool_js[0].sendport=$port" 2>/dev/null  
        uci set "sms_tool_js.@sms_tool_js[0].ussdport=$port" 2>/dev/null
        uci set "sms_tool_js.@sms_tool_js[0].atport=$port" 2>/dev/null
        uci -q commit sms_tool_js
    }
    
    logger -t wwan_modem "Serial port set to: $port"
}

# Detect OrangePi Zero3 hardware
is_opiz3() {
    [ -f "/proc/device-tree/model" ] && grep -q "OrangePi Zero3" /proc/device-tree/model 2>/dev/null
}

# Configure LED for OrangePi Zero3  
set_led() {
    local led_dev="$1"
    
    [ -z "$led_dev" ] && return 1
    
    if is_opiz3; then
        if uci_section_exists "system" "@led[0]"; then
            uci set "system.@led[0].dev=$led_dev" 2>/dev/null
            uci -q commit system
            /etc/init.d/led restart >/dev/null 2>&1
            logger -t wwan_modem "LED configured for interface: $led_dev"
        fi
    fi
}

# Enable/Disable ModemManager hotplug
toggle_mm() {
    local action="$1"
    local file="/etc/hotplug.d/tty/25-modemmanager-tty"
    
    [ ! -f "$file" ] && return 1
    
    case "$action" in
        "enable")
            sed -i 's/^# \(mm_log "info" .*\)/\1/' "$file" 2>/dev/null
            sed -i 's/^# \(mm_report_event .*\)/\1/' "$file" 2>/dev/null
            ;;
        "disable")
            sed -i 's/^\(mm_log "info" .*\)/# \1/' "$file" 2>/dev/null
            sed -i 's/^\(mm_report_event .*\)/# \1/' "$file" 2>/dev/null
            ;;
    esac
    
    logger -t wwan_modem "ModemManager hotplug: $action"
}

# Set protocol and manage interfaces
set_proto() {
    local target_proto="$1"
    local target_iface="$2"
    
    [ -z "$target_proto" ] && return 1
    
    # Get all available interfaces
    local mm_iface atc_iface xmm_iface
    mm_iface=$(get_iface "modemmanager")
    atc_iface=$(get_iface "atc") 
    xmm_iface=$(get_iface "xmm")
    
    # Disable all interfaces first
    for iface in "$mm_iface" "$atc_iface" "$xmm_iface"; do
        if [ -n "$iface" ] && interface_exists "$iface"; then
            uci set "network.$iface.disabled=1" 2>/dev/null
            ifdown "$iface" >/dev/null 2>&1
        fi
    done
    
    # Enable target interface
    if [ -n "$target_iface" ] && interface_exists "$target_iface"; then
        uci set "network.$target_iface.disabled=0" 2>/dev/null
        uci -q commit network
        
        # For ATC, wait a moment before bringing up interface
        if [ "$target_proto" = "atc" ]; then
            sleep 2
        fi
        
        ifup "$target_iface" >/dev/null 2>&1
        logger -t wwan_modem "Interface $target_iface activated with protocol: $target_proto"
    else
        uci -q commit network
        logger -t wwan_modem "No valid interface found for protocol: $target_proto"
    fi
}

# Get device name based on VID
get_device_name() {
    case "$1" in
        1199) echo "EM7455" ;;
        2c7c) echo "RM50XX" ;;
        3f0) echo "LT4220" ;;
        2cb7) echo "L850-GL" ;;
        8087) echo "L860-GL" ;;
        413c) echo "DW5821e" ;;
        1bc7) echo "LN940" ;;
        489) echo "Generic" ;;
        5c6) echo "T99W175" ;;
        e8d) echo "FM350-GL" ;;
        *) echo "Unknown" ;;
    esac
}

# Detect user-configured protocol (for L850/L860)
detect_user_protocol() {
    local atc_iface xmm_iface mm_iface
    
    atc_iface=$(get_iface "atc")
    xmm_iface=$(get_iface "xmm") 
    mm_iface=$(get_iface "modemmanager")
    
    # Priority: ATC > XMM > MM
    if [ -n "$atc_iface" ] && interface_exists "$atc_iface"; then
        echo "atc:$atc_iface"
    elif [ -n "$xmm_iface" ] && interface_exists "$xmm_iface"; then
        echo "xmm:$xmm_iface"
    elif [ -n "$mm_iface" ] && interface_exists "$mm_iface"; then
        echo "mm:$mm_iface"
    else
        echo "none:"
    fi
}

# Configure modem based on VID
configure_modem() {
    local vid="$1"
    
    case "$vid" in
        1199) # EM7430/EM7455 - Sierra Wireless
            set_port "/dev/ttyUSB1"
            set_led "wwan0"
            toggle_mm "enable"
            
            local mm_iface
            mm_iface=$(get_iface "modemmanager")
            set_proto "mm" "$mm_iface"
            ;;
            
        2c7c|3f0) # Quectel RM5XX, HP LT4220
            set_port "/dev/ttyUSB2"
            set_led "wwan0"
            toggle_mm "enable"
            
            local mm_iface
            mm_iface=$(get_iface "modemmanager")
            set_proto "mm" "$mm_iface"
            ;;
            
        2cb7) # Fibocom L850-GL - Auto detect protocol
            set_port "/dev/ttyACM0"
            
            local proto_info proto_name proto_iface
            proto_info=$(detect_user_protocol)
            proto_name=$(echo "$proto_info" | cut -d':' -f1)
            proto_iface=$(echo "$proto_info" | cut -d':' -f2)
            
            case "$proto_name" in
                "atc")
                    set_led "wwan0"
                    toggle_mm "disable"
                    set_proto "atc" "$proto_iface"
                    logger -t wwan_modem "L850-GL: Using ATC protocol (user configured)"
                    ;;
                "xmm")
                    set_led "eth1"
                    toggle_mm "enable"
                    set_proto "xmm" "$proto_iface"
                    logger -t wwan_modem "L850-GL: Using XMM protocol (user configured)"
                    ;;
                *)
                    # Default to ModemManager
                    set_led "wwan0"
                    toggle_mm "enable"
                    local mm_iface
                    mm_iface=$(get_iface "modemmanager")
                    set_proto "mm" "$mm_iface"
                    logger -t wwan_modem "L850-GL: Using ModemManager protocol (default)"
                    ;;
            esac
            ;;
            
        8087) # Intel L860-GL - Auto detect protocol
            set_port "/dev/ttyACM0"
            
            local proto_info proto_name proto_iface
            proto_info=$(detect_user_protocol)
            proto_name=$(echo "$proto_info" | cut -d':' -f1)
            proto_iface=$(echo "$proto_info" | cut -d':' -f2)
            
            case "$proto_name" in
                "atc")
                    set_led "wwan0"
                    toggle_mm "disable"
                    set_proto "atc" "$proto_iface"
                    logger -t wwan_modem "L860-GL: Using ATC protocol (user configured)"
                    ;;
                "mm")
                    set_led "wwan0"
                    toggle_mm "enable"
                    set_proto "mm" "$proto_iface"
                    logger -t wwan_modem "L860-GL: Using ModemManager protocol (user configured)"
                    ;;
                *)
                    # Default to XMM
                    set_led "eth1"
                    toggle_mm "enable"
                    local xmm_iface
                    xmm_iface=$(get_iface "xmm")
                    set_proto "xmm" "$xmm_iface"
                    logger -t wwan_modem "L860-GL: Using XMM protocol (default)"
                    ;;
            esac
            ;;
            
        413c|1bc7|489) # Dell DW5821e, Telit LN940, Generic
            set_port "/dev/ttyUSB0"
            set_led "wwan0"
            toggle_mm "enable"
            
            local mm_iface
            mm_iface=$(get_iface "modemmanager")
            set_proto "mm" "$mm_iface"
            ;;
            
        5c6) # Qualcomm T99W175
            set_port "/dev/ttyUSB3"
            set_led "wwan0"
            toggle_mm "disable"
            
            local mm_iface
            mm_iface=$(get_iface "modemmanager")
            set_proto "mm" "$mm_iface"
            ;;
            
        e8d) # Fibocom FM350-GL
            set_port "/dev/ttyUSB4"
            set_led "eth1"
            toggle_mm "disable"
            
            local atc_iface
            atc_iface=$(get_iface "atc")
            set_proto "atc" "$atc_iface"
            ;;
    esac
}

# Main execution logic
STATUS_FILE="/tmp/wwan_modem.status"

case "$ACTION" in
    "add"|"change")
        # Check if device is not already configured
        if [ ! -f "$STATUS_FILE" ]; then
            # Validate DEVPATH environment variable
            if [ -z "$DEVPATH" ]; then
                logger -t wwan_modem "DEVPATH not found, skipping device path configuration"
            fi
            
            device_path="/sys${DEVPATH}"
            device_name=$(get_device_name "$VID")
            
            logger -t wwan_modem "$device_name detected (VID:$VID)"
            
            # Configure the modem
            configure_modem "$VID"
            
            # Set device path for active interface (if DEVPATH exists)
            if [ -n "$DEVPATH" ]; then
                local mm_iface atc_iface xmm_iface
                mm_iface=$(get_iface "modemmanager")
                atc_iface=$(get_iface "atc")
                xmm_iface=$(get_iface "xmm")
                
                for iface in "$mm_iface" "$atc_iface" "$xmm_iface"; do
                    if [ -n "$iface" ] && interface_exists "$iface"; then
                        local disabled
                        disabled=$(uci -q get "network.$iface.disabled" 2>/dev/null)
                        if [ "$disabled" != "1" ]; then
                            uci set "network.$iface.device=$device_path" 2>/dev/null
                            uci -q commit network
                            logger -t wwan_modem "Device path set for interface: $iface"
                            break
                        fi
                    fi
                done
            fi
            
            # Save device status
            echo "$VID|$device_name|$(date '+%H:%M:%S')" > "$STATUS_FILE"
            logger -t wwan_modem "$device_name configuration completed"
            
        else
            logger -t wwan_modem "Device already configured, skipping"
        fi
        ;;
        
    "remove")
        # Clean up when device is removed
        if [ -f "$STATUS_FILE" ]; then
            local old_device
            old_device=$(cut -d'|' -f2 "$STATUS_FILE" 2>/dev/null)
            logger -t wwan_modem "$old_device removed"
            
            # Reset LED configuration for OrangePi Zero3
            if is_opiz3 && uci_section_exists "system" "@led[0]"; then
                uci set "system.@led[0].dev=" 2>/dev/null
                uci -q commit system
                /etc/init.d/led restart >/dev/null 2>&1
                logger -t wwan_modem "LED configuration reset"
            fi
            
            rm -f "$STATUS_FILE"
        fi
        ;;
esac

exit 0
